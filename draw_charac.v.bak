	
module draw_bg(begin_draw, clk, x, y, color, drawEn, done);	
	//state table	
	always @(*)
	begin
		case(state)
		A://initializing write elements
				n_state = C;
		B://initializing erase elements
				n_state = E;	
		C://write only: increase address by 1
				n_state = D;
		D:	//write only: reading colour
				n_state = E; 
		E:	//x increment
			if(x < (x_in + 4'd7)) begin
				if (erase)
				n_state = E;
				else
				n_state = C;
				end
			else
				n_state = F;
		F: //y increment
			if(y < (y_in + 4'd7)) begin
				if (erase)
				n_state = E;
				else
				n_state = C;
			end
			else begin
				n_state = G;
			end
		G://still state, allowing the image to show
			if((!erase && hold < 28'd2000000) ||(erase && hold< 28'd100000) )
			n_state = G;
			else
			begin 
				if (erase)
				n_state = A;
				else
				n_state = B;
			end
			
		default: n_state = A;
		endcase
	end

	reg [28:0]hold;
	initial hold = 28'b0;
	

	//datapath
	always@(posedge CLOCK_50) begin
	state <= n_state;
	
	if(state == A) begin //initializing write
		hold <= 28'b0;
		writeEn <= 1'b1;
		erase <= 1'b0;
		address <= 7'b0;
		
		if(((horizontal == 2'b11) &( x_in < 8'd152)) |((horizontal == 2'b00) & (x_in > 8'd0)))
		begin
		x_in <= x_in - SW[2] + SW[3];
		x <= x_in - SW[2] + SW[3];
		end
		else 
		x <= x_in;
		
		if(((vertical == 2'b11) & (y_in < 7'd112)) |((vertical == 2'b00) & (y_in > 7'd0)))
		begin
		y_in <= y_in - SW[0]  + SW[1];
		y <= y_in - SW[0] + SW[1];
		end
		else 
		y <= y_in;
	end 
	
	
	else if (state == B)begin //initializing erase
		hold <= 28'b0;
		x <= x_in;
		y <= y_in;
		erase <= 1'b1;
		color <= 3'b000;
		writeEn <= 1'b1;
		end

	else if (state == C)
		address <= address + 1;
	
	else if (state == D)
		color <= color_in;
		
	else if (state == E)begin
		x <= x + 1'b1;
		if(x == (x_in + 4'd7))
		writeEn <= 1'b0;
		end
	else if (state == F) begin
		y <= y + 1'b1;
		x <= x_in;
		if (y == (y_in + 3'd7))
			writeEn <= 1'b0;
		else
			writeEn <= 1'b1;
		end
	else if (state == G) begin
		hold <= hold + 1;
	end
end

	endmodule
	